Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> term
Rule 2     expression -> expression AND term
Rule 3     expression -> expression OR term
Rule 4     expression -> NOT expression
Rule 5     expression -> expression IMP expression
Rule 6     expression -> expression DIMP expression
Rule 7     term -> factor
Rule 8     factor -> VARIABLE
Rule 9     factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 2
DIMP                 : 6
IMP                  : 5
LPAREN               : 9
NOT                  : 4
OR                   : 3
RPAREN               : 9
VARIABLE             : 8
error                : 

Nonterminals, with rules where they appear

expression           : 2 3 4 5 5 6 6 9 0
factor               : 7
term                 : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . term
    (2) expression -> . expression AND term
    (3) expression -> . expression OR term
    (4) expression -> . NOT expression
    (5) expression -> . expression IMP expression
    (6) expression -> . expression DIMP expression
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 3
    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 1

    (0) S' -> expression .
    (2) expression -> expression . AND term
    (3) expression -> expression . OR term
    (5) expression -> expression . IMP expression
    (6) expression -> expression . DIMP expression

    AND             shift and go to state 7
    OR              shift and go to state 8
    IMP             shift and go to state 9
    DIMP            shift and go to state 10


state 2

    (1) expression -> term .

    AND             reduce using rule 1 (expression -> term .)
    OR              reduce using rule 1 (expression -> term .)
    IMP             reduce using rule 1 (expression -> term .)
    DIMP            reduce using rule 1 (expression -> term .)
    $end            reduce using rule 1 (expression -> term .)
    RPAREN          reduce using rule 1 (expression -> term .)


state 3

    (4) expression -> NOT . expression
    (1) expression -> . term
    (2) expression -> . expression AND term
    (3) expression -> . expression OR term
    (4) expression -> . NOT expression
    (5) expression -> . expression IMP expression
    (6) expression -> . expression DIMP expression
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 3
    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 11
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 4

    (7) term -> factor .

    AND             reduce using rule 7 (term -> factor .)
    OR              reduce using rule 7 (term -> factor .)
    IMP             reduce using rule 7 (term -> factor .)
    DIMP            reduce using rule 7 (term -> factor .)
    $end            reduce using rule 7 (term -> factor .)
    RPAREN          reduce using rule 7 (term -> factor .)


state 5

    (8) factor -> VARIABLE .

    AND             reduce using rule 8 (factor -> VARIABLE .)
    OR              reduce using rule 8 (factor -> VARIABLE .)
    IMP             reduce using rule 8 (factor -> VARIABLE .)
    DIMP            reduce using rule 8 (factor -> VARIABLE .)
    $end            reduce using rule 8 (factor -> VARIABLE .)
    RPAREN          reduce using rule 8 (factor -> VARIABLE .)


state 6

    (9) factor -> LPAREN . expression RPAREN
    (1) expression -> . term
    (2) expression -> . expression AND term
    (3) expression -> . expression OR term
    (4) expression -> . NOT expression
    (5) expression -> . expression IMP expression
    (6) expression -> . expression DIMP expression
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 3
    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 12
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 7

    (2) expression -> expression AND . term
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    term                           shift and go to state 13
    factor                         shift and go to state 4

state 8

    (3) expression -> expression OR . term
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    term                           shift and go to state 14
    factor                         shift and go to state 4

state 9

    (5) expression -> expression IMP . expression
    (1) expression -> . term
    (2) expression -> . expression AND term
    (3) expression -> . expression OR term
    (4) expression -> . NOT expression
    (5) expression -> . expression IMP expression
    (6) expression -> . expression DIMP expression
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 3
    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 15
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 10

    (6) expression -> expression DIMP . expression
    (1) expression -> . term
    (2) expression -> . expression AND term
    (3) expression -> . expression OR term
    (4) expression -> . NOT expression
    (5) expression -> . expression IMP expression
    (6) expression -> . expression DIMP expression
    (7) term -> . factor
    (8) factor -> . VARIABLE
    (9) factor -> . LPAREN expression RPAREN

    NOT             shift and go to state 3
    VARIABLE        shift and go to state 5
    LPAREN          shift and go to state 6

    expression                     shift and go to state 16
    term                           shift and go to state 2
    factor                         shift and go to state 4

state 11

    (4) expression -> NOT expression .
    (2) expression -> expression . AND term
    (3) expression -> expression . OR term
    (5) expression -> expression . IMP expression
    (6) expression -> expression . DIMP expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for IMP resolved as shift
  ! shift/reduce conflict for DIMP resolved as shift
    $end            reduce using rule 4 (expression -> NOT expression .)
    RPAREN          reduce using rule 4 (expression -> NOT expression .)
    AND             shift and go to state 7
    OR              shift and go to state 8
    IMP             shift and go to state 9
    DIMP            shift and go to state 10

  ! AND             [ reduce using rule 4 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 4 (expression -> NOT expression .) ]
  ! IMP             [ reduce using rule 4 (expression -> NOT expression .) ]
  ! DIMP            [ reduce using rule 4 (expression -> NOT expression .) ]


state 12

    (9) factor -> LPAREN expression . RPAREN
    (2) expression -> expression . AND term
    (3) expression -> expression . OR term
    (5) expression -> expression . IMP expression
    (6) expression -> expression . DIMP expression

    RPAREN          shift and go to state 17
    AND             shift and go to state 7
    OR              shift and go to state 8
    IMP             shift and go to state 9
    DIMP            shift and go to state 10


state 13

    (2) expression -> expression AND term .

    AND             reduce using rule 2 (expression -> expression AND term .)
    OR              reduce using rule 2 (expression -> expression AND term .)
    IMP             reduce using rule 2 (expression -> expression AND term .)
    DIMP            reduce using rule 2 (expression -> expression AND term .)
    $end            reduce using rule 2 (expression -> expression AND term .)
    RPAREN          reduce using rule 2 (expression -> expression AND term .)


state 14

    (3) expression -> expression OR term .

    AND             reduce using rule 3 (expression -> expression OR term .)
    OR              reduce using rule 3 (expression -> expression OR term .)
    IMP             reduce using rule 3 (expression -> expression OR term .)
    DIMP            reduce using rule 3 (expression -> expression OR term .)
    $end            reduce using rule 3 (expression -> expression OR term .)
    RPAREN          reduce using rule 3 (expression -> expression OR term .)


state 15

    (5) expression -> expression IMP expression .
    (2) expression -> expression . AND term
    (3) expression -> expression . OR term
    (5) expression -> expression . IMP expression
    (6) expression -> expression . DIMP expression

    IMP             reduce using rule 5 (expression -> expression IMP expression .)
    DIMP            reduce using rule 5 (expression -> expression IMP expression .)
    $end            reduce using rule 5 (expression -> expression IMP expression .)
    RPAREN          reduce using rule 5 (expression -> expression IMP expression .)
    AND             shift and go to state 7
    OR              shift and go to state 8

  ! AND             [ reduce using rule 5 (expression -> expression IMP expression .) ]
  ! OR              [ reduce using rule 5 (expression -> expression IMP expression .) ]
  ! IMP             [ shift and go to state 9 ]
  ! DIMP            [ shift and go to state 10 ]


state 16

    (6) expression -> expression DIMP expression .
    (2) expression -> expression . AND term
    (3) expression -> expression . OR term
    (5) expression -> expression . IMP expression
    (6) expression -> expression . DIMP expression

    IMP             reduce using rule 6 (expression -> expression DIMP expression .)
    DIMP            reduce using rule 6 (expression -> expression DIMP expression .)
    $end            reduce using rule 6 (expression -> expression DIMP expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIMP expression .)
    AND             shift and go to state 7
    OR              shift and go to state 8

  ! AND             [ reduce using rule 6 (expression -> expression DIMP expression .) ]
  ! OR              [ reduce using rule 6 (expression -> expression DIMP expression .) ]
  ! IMP             [ shift and go to state 9 ]
  ! DIMP            [ shift and go to state 10 ]


state 17

    (9) factor -> LPAREN expression RPAREN .

    AND             reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    IMP             reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    DIMP            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (factor -> LPAREN expression RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 11 resolved as shift
WARNING: shift/reduce conflict for OR in state 11 resolved as shift
WARNING: shift/reduce conflict for IMP in state 11 resolved as shift
WARNING: shift/reduce conflict for DIMP in state 11 resolved as shift
